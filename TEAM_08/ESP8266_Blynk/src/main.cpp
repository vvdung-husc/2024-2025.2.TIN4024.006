//HU·ª≤NH VƒÇN NH√ÇN
#define BLYNK_TEMPLATE_ID "TMPL6RQGDLOQe" 
#define BLYNK_TEMPLATE_NAME "ESP8266" 
#define BLYNK_AUTH_TOKEN "HkHpsRJ8SZ-wbZcBynAWmAqATjJOvHQV" 
//VƒÇN HU·ª≤NH T∆Ø·ªúNG AN
// #define BLYNK_TEMPLATE_ID "TMPL6ZLCad5kE"
// #define BLYNK_TEMPLATE_NAME "ESP8266"
// #define BLYNK_AUTH_TOKEN "XVy7pNOV6Mh-Qv1Pz9y9FxqR2Tt1-phq"

//NGUY·ªÑN KH√ÅNH PH∆Ø·ª¢NG
//#define BLYNK_TEMPLATE_ID "TMPL6g637i_uM"
//#define BLYNK_TEMPLATE_NAME "ESP8266"
//#define BLYNK_AUTH_TOKEN "J1Z79ngFV0fyjM1r8OLUE7QzQIULpJTx"

#include <Arduino.h>
#include "utils.h"

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

#include <Wire.h>
#include <U8g2lib.h>

#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>

// Th√¥ng tin WiFi
const char* ssid = "CNTT-MMT";    
const char* password = "13572468";

//HU·ª≤NH VƒÇN NH√ÇN
// Token bot Telegram
const char* botToken = "8027625067:AAHdREtzh1lGcXPLv2VNkIr8-Lo5ffGE3pI";
// Group ID Telegram
const String chatId = "-1002439452600";

//VƒÇN HU·ª≤NH T∆Ø·ªúNG AN
// const char* botToken = "7619429343:AAGqmzURxunRvxQdZU2Cjdl3rwXcAZtnLKQ";
// const String chatId = "-1002574788554"

//NGUY·ªÑN KH√ÅNH PH∆Ø·ª¢NG
// const char* botToken = "7770420858:AAHEY8OZxUDEhFBPrQOw4rgU9OoPZ3r8tvg"
// const String chatId "-4709041095"

// Ch√¢n LED ƒëi·ªÅu khi·ªÉn ƒë√®n giao th√¥ng
#define gPIN 15
#define yPIN 2
#define rPIN 5

#define OLED_SDA 13
#define OLED_SCL 12

// Khai b√°o ƒë·ªëi t∆∞·ª£ng OLED
U8G2_SH1106_128X64_NONAME_F_HW_I2C oled(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

bool blinkMode = false;
bool trafficActive = true;  // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i ƒë√®n

unsigned long upTime = 0;
float fTemperature = 0.0;
float fHumidity = 0.0;

BlynkTimer timer;

// Khai b√°o ƒë·ªëi t∆∞·ª£ng Telegram
WiFiClientSecure client;
UniversalTelegramBot bot(botToken, client);
unsigned long lastTimeBotRan;
const int botRequestDelay = 1000;  // Ki·ªÉm tra tin nh·∫Øn m·ªói gi√¢y

// Nh·∫≠n l·ªánh t·ª´ Blynk ƒë·ªÉ b·∫≠t ch·∫ø ƒë·ªô nh·∫•p nh√°y ƒë√®n v√†ng
BLYNK_WRITE(V3) {
  blinkMode = param.asInt();
}

// Hi·ªÉn th·ªã tr√™n OLED
void updateOLED() {
  oled.clearBuffer();
  oled.setFont(u8g2_font_unifont_t_vietnamese2);

  oled.drawUTF8(0, 14, ("Nhiet do: " + String(fTemperature, 1) + "¬∞C").c_str());
  oled.drawUTF8(0, 28, ("Do am: " + String(fHumidity, 1) + "%").c_str());
  oled.drawUTF8(0, 42, ("Uptime: " + String(upTime) + "s").c_str());

  oled.sendBuffer();
}

// ƒêi·ªÅu khi·ªÉn ƒë√®n giao th√¥ng
void TrafficLightControl() {
  static unsigned long lastTimer = 0;
  static int state = 0;
  static const unsigned long durations[] = {2000, 3000, 1000}; 
  static const int ledPins[] = {rPIN, gPIN, yPIN};

  if (!trafficActive) {  // N·∫øu ƒë√®n b·ªã t·∫Øt t·ª´ Telegram
    digitalWrite(rPIN, LOW);
    digitalWrite(yPIN, LOW);
    digitalWrite(gPIN, LOW);
    return;
  }

  if (blinkMode) {  // Ch·∫ø ƒë·ªô nh·∫•p nh√°y ƒë√®n v√†ng
    if (millis() - lastTimer > 500) {
      lastTimer = millis();
      digitalWrite(yPIN, !digitalRead(yPIN));
    }
    digitalWrite(rPIN, LOW);
    digitalWrite(gPIN, LOW);
    return;
  }

  // Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
  if (millis() - lastTimer > durations[state]) {
    lastTimer = millis();
    digitalWrite(ledPins[state], LOW);
    state = (state + 1) % 3;
    digitalWrite(ledPins[state], HIGH);
  }
}

// G·ª≠i d·ªØ li·ªáu l√™n Blynk
void sendToBlynk() {
  Blynk.virtualWrite(V0, upTime);      
  Blynk.virtualWrite(V1, fTemperature);
  Blynk.virtualWrite(V2, fHumidity);
}

// Sinh d·ªØ li·ªáu nhi·ªát ƒë·ªô & ƒë·ªô ·∫©m ng·∫´u nhi√™n
float randomTemperature() {
  return random(-400, 800) / 10.0;
}

float randomHumidity() {
  return random(0, 1000) / 10.0;
}

// C·∫≠p nh·∫≠t nhi·ªát ƒë·ªô & ƒë·ªô ·∫©m
void updateSensorData() {
  static unsigned long lastTimer = 0;
  if (millis() - lastTimer < 2000) return;
  lastTimer = millis();

  fTemperature = randomTemperature();
  fHumidity = randomHumidity();
}

// C·∫≠p nh·∫≠t th·ªùi gian ch·∫°y
void updateupTime() {
  static unsigned long lastTimer = 0;
  if (millis() - lastTimer < 1000) return;
  lastTimer = millis();
  upTime++;
}

// X·ª≠ l√Ω tin nh·∫Øn t·ª´ Telegram
void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    Serial.println("Tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c: " + text);

    if (chat_id == chatId) {  // Ki·ªÉm tra ƒë√∫ng group ID
      if (text == "/traffic_off") {
        trafficActive = false;
        digitalWrite(rPIN, LOW);
        digitalWrite(yPIN, LOW);
        digitalWrite(gPIN, LOW);
        bot.sendMessage(chatId, "üö¶ ƒê√®n giao th√¥ng ƒë√£ t·∫Øt.", "");
      } else if (text == "/traffic_on") {
        trafficActive = true;
        bot.sendMessage(chatId, "üö¶ ƒê√®n giao th√¥ng ho·∫°t ƒë·ªông tr·ªü l·∫°i.", "");
      }
    }
  }
}

// Th√™m bi·∫øn th·ªùi gian cho c·∫£nh b√°o Telegram
unsigned long lastAlertTime = 0;
const unsigned long alertInterval = 60 * 1000;  // 1 ph√∫t

// G·ª≠i c·∫£nh b√°o n·∫øu nhi·ªát ƒë·ªô ho·∫∑c ƒë·ªô ·∫©m nguy hi·ªÉm
void checkAndSendAlert() {
  unsigned long currentTime = millis();
  if (currentTime - lastAlertTime < alertInterval) return; // Ch·ªâ g·ª≠i m·ªói 5 ph√∫t

  String alertMessage = "üö® *C·∫¢NH B√ÅO S·ª®C KH·ªéE!* üö®\n";
  bool shouldSendAlert = false;

  if (fTemperature < 10) {
    alertMessage += "üå°Ô∏è *Nhi·ªát ƒë·ªô qu√° th·∫•p!* Nguy c∆° h·∫° th√¢n nhi·ªát, t√™ c√≥ng.\n";
    shouldSendAlert = true;
  } else if (fTemperature >= 30 && fTemperature <= 35) {
    alertMessage += "üî• *Nhi·ªát ƒë·ªô cao!* C√≥ th·ªÉ g√¢y m·∫•t n∆∞·ªõc, m·ªát m·ªèi.\n";
    shouldSendAlert = true;
  } else if (fTemperature > 35 && fTemperature <= 40) {
    alertMessage += "‚ö†Ô∏è *C·∫£nh b√°o n√≥ng!* Nguy c∆° s·ªëc nhi·ªát, chu·ªôt r√∫t, say n·∫Øng.\n";
    shouldSendAlert = true;
  } else if (fTemperature > 40) {
    alertMessage += "üöë *C·ª±c k·ª≥ nguy hi·ªÉm!* C√≥ th·ªÉ g√¢y suy n·ªôi t·∫°ng, ƒë·ªôt qu·ªµ nhi·ªát.\n";
    shouldSendAlert = true;
  }

  if (fHumidity < 30) {
    alertMessage += "üí® *ƒê·ªô ·∫©m th·∫•p!* C√≥ th·ªÉ g√¢y kh√¥ da, k√≠ch ·ª©ng m·∫Øt.\n";
    shouldSendAlert = true;
  } else if (fHumidity > 70 && fHumidity <= 80) {
    alertMessage += "üå´Ô∏è *ƒê·ªô ·∫©m cao!* TƒÉng nguy c∆° vi khu·∫©n v√† n·∫•m m·ªëc.\n";
    shouldSendAlert = true;
  } else if (fHumidity > 80) {
    alertMessage += "üö® *ƒê·ªô ·∫©m qu√° cao!* C∆° th·ªÉ kh√≥ tho√°t m·ªì h√¥i, d·ªÖ s·ªëc nhi·ªát.\n";
    shouldSendAlert = true;
  }

  if (shouldSendAlert) {
    bot.sendMessage(chatId, alertMessage, "Markdown");
    lastAlertTime = currentTime; // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i c·∫£nh b√°o
  }
}



// SETUP
void setup() {
  Serial.begin(115200);

  // C·∫•u h√¨nh LED
  pinMode(gPIN, OUTPUT);
  pinMode(yPIN, OUTPUT);
  pinMode(rPIN, OUTPUT);
  digitalWrite(gPIN, LOW);
  digitalWrite(yPIN, LOW);
  digitalWrite(rPIN, HIGH);

  // C·∫•u h√¨nh OLED
  Wire.begin(OLED_SDA, OLED_SCL);
  oled.begin();
  oled.clearBuffer();
  oled.setFont(u8g2_font_unifont_t_vietnamese1);
  oled.drawUTF8(0, 14, "Tr∆∞·ªùng ƒêHKH");
  oled.drawUTF8(0, 28, "Khoa CNTT");
  oled.drawUTF8(0, 42, "L·∫≠p tr√¨nh IoT");
  oled.sendBuffer();

  // K·∫øt n·ªëi WiFi & Blynk
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);

  client.setInsecure();  // B·ªè qua SSL
  bot.sendMessage(chatId, "üö¶ Bot ƒëi·ªÅu khi·ªÉn ƒë√®n giao th√¥ng ƒë√£ kh·ªüi ƒë·ªông!", "");

  // G·ª≠i d·ªØ li·ªáu l√™n Blynk m·ªói 3 gi√¢y
  timer.setInterval(3000L, sendToBlynk);
}

// LOOP
void loop() {
  Blynk.run();
  timer.run();

  TrafficLightControl();
  updateSensorData();
  updateupTime();
  updateOLED();

  // X·ª≠ l√Ω tin nh·∫Øn Telegram
  if (millis() - lastTimeBotRan > botRequestDelay) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }

  // Ki·ªÉm tra v√† g·ª≠i c·∫£nh b√°o n·∫øu c·∫ßn
  checkAndSendAlert();
}
