#include <Arduino.h>
#include <TM1637Display.h>

// Pin ƒë√®n LED
// ƒê√®n giao th√¥ng
#define rLED 27 // ƒê√®n ƒë·ªè
#define yLED 26 // ƒê√®n v√†ng
#define gLED 25 // ƒê√®n xanh
// ƒê√®n tr·ªùi t·ªëi
#define blueLED 21

// Pin - TM1637
#define CLK 18
#define DIO 19

// N√∫t nh·∫•n ƒë·ªÉ t·∫°m d·ª´ng.
#define BUTTON_PIN 23
// C·∫£m bi·∫øn quang (LDR) ƒë·ªÉ nh·∫≠n bi·∫øt tr·ªùi t·ªëi.
#define LDR_PIN 13

// Khai b√°o th·ªùi gian c·ªßa m·ªói t√≠n hi·ªáu ƒë√®n (ms)
#define rTIME 5000
#define yTIME 2000
#define gTIME 5000

TM1637Display display(CLK, DIO);
// bi·∫øn th·ªùi gian v√† tr·∫°ng th√°i
ulong currentMiliseconds = 0; // Th·ªùi gian hi·ªán t·∫°i
ulong ledTimeStart = 0;       // Th·ªùi ƒëi·ªÉm ƒë√®n ƒë·ªïi m√†u
int currentLED = rLED;        // ƒê√®n hi·ªán t·∫°i ƒëang s√°ng
bool isPaused = false;        // Tr·∫°ng th√°i d·ª´ng
int counter = rTIME / 1000;   // Th·ªùi gian hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c (s)

void togglePause();                                // T·∫°m d·ª´ng ho·∫∑c ti·∫øp t·ª•c h·ªá th·ªëng
bool IsReady(ulong &ulTimer, uint32_t milisecond); // Ki·ªÉm tra xem ƒë√£ h·∫øt th·ªùi gian ƒë√®n ch∆∞a
void NonBlocking_Traffic_Light();                  // ƒêi·ªÅu khi·ªÉn ƒë√®n giao th√¥ng kh√¥ng d√πng delay
void Testing_Display();                            // Hi·ªÉn th·ªã th·ªùi gian ƒë·∫øm ng∆∞·ª£c tr√™n  TM1637
bool isNightMode = false; // L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh l√† ban ng√†y)
void yLED_Blink();

void setup()
{
    Serial.begin(115200);
    pinMode(rLED, OUTPUT);
    pinMode(yLED, OUTPUT);
    pinMode(gLED, OUTPUT);
    pinMode(blueLED, OUTPUT);
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    pinMode(LDR_PIN, INPUT);

    display.setBrightness(7);
    digitalWrite(yLED, LOW);
    digitalWrite(gLED, LOW);
    digitalWrite(rLED, HIGH);
    currentLED = rLED;

    attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), togglePause, FALLING);
    Serial.println("<== START ==>");
    Serial.print("RED light \t : ");
    Serial.print(counter);
    Serial.println("s");
}

void togglePause()
{
    isPaused = !isPaused;
    if (isPaused)
    {
        // T·∫Øt t·∫•t c·∫£ ƒë√®n giao th√¥ng khi t·∫°m d·ª´ng
        digitalWrite(rLED, LOW);
        digitalWrite(yLED, LOW);
        digitalWrite(gLED, LOW);
    }
    else
    {
        // Khi ti·∫øp t·ª•c, b·∫≠t l·∫°i ƒë√®n theo tr·∫°ng th√°i hi·ªán t·∫°i
        switch (currentLED)
        {
        case rLED:
            digitalWrite(rLED, HIGH);
            break;
        case yLED:
            digitalWrite(yLED, HIGH);
            break;
        case gLED:
            digitalWrite(gLED, HIGH);
            break;
        }
    }
}

void loop()
{
    int lightLevel = analogRead(LDR_PIN);
    bool newMode = (lightLevel < 1000); // X√°c ƒë·ªãnh ch·∫ø ƒë·ªô hi·ªán t·∫°i <1000 LUX ƒë√™m else Ng√†y

    // Ki·ªÉm tra n·∫øu ch·∫ø ƒë·ªô thay ƒë·ªïi
    if (newMode != isNightMode)
    {
        isNightMode = newMode; // C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi
        if (isNightMode)
        {
            Serial.println("--------------------------------------------------------");
            Serial.println("üåô NIGHT MODE üåô");
        }
        else
        {
            Serial.println("--------------------------------------------------------");
            Serial.println("‚òÄÔ∏è DAY MODE ‚òÄÔ∏è");
            Serial.println("--------------------------------------------------------");
        }
    }

    if (isNightMode)
    {
        digitalWrite(blueLED, HIGH);
        digitalWrite(rLED, LOW);
        digitalWrite(gLED, LOW);
        display.clear(); // T·∫Øt m√†n h√¨nh hi·ªÉn th·ªã
        yLED_Blink();
    }
    else
    {
        digitalWrite(blueLED, LOW);
        digitalWrite(yLED, LOW);

        if (!isPaused)
        {
            currentMiliseconds = millis();
            NonBlocking_Traffic_Light();
            Testing_Display();
        }
    }
}



void Testing_Display()
{
    display.showNumberDec(counter, true, 3, 1);
    if (counter > 0)
    {
        counter--;
    }
    delay(1000);
}

bool IsReady(ulong &ulTimer, uint32_t milisecond)
{
    if (currentMiliseconds - ulTimer < milisecond)
        return false;
    ulTimer = currentMiliseconds;
    return true;
}

void NonBlocking_Traffic_Light()
{
    switch (currentLED)
    {
    case rLED: // ƒê√®n ƒë·ªè: 5 gi√¢y
        if (IsReady(ledTimeStart, rTIME))
        {
            digitalWrite(rLED, LOW);
            digitalWrite(gLED, HIGH);
            currentLED = gLED;
            counter = gTIME / 1000;
            Serial.print("GREEN light\t : ");
            Serial.print(counter);
            Serial.println("s");
        }
        break;

    case gLED: // ƒê√®n xanh: 5 gi√¢y
        if (IsReady(ledTimeStart, gTIME))
        {
            digitalWrite(gLED, LOW);
            digitalWrite(yLED, HIGH);
            currentLED = yLED;
            counter = yTIME / 1000;
            Serial.print("YELLOW light\t : ");
            Serial.print(counter);
            Serial.println("s");
        }
        break;

    case yLED: // ƒê√®n v√†ng: 2 gi√¢y
        if (IsReady(ledTimeStart, yTIME))
        {
            digitalWrite(yLED, LOW);
            digitalWrite(rLED, HIGH);
            currentLED = rLED;
            counter = rTIME / 1000;
            Serial.print("RED light\t : ");
            Serial.print(counter);
            Serial.println("s");
        }
        break;
    }
}
void yLED_Blink()
{
    static ulong lastBlinkTime = 0;  // L∆∞u th·ªùi gian l·∫ßn nh·∫•p nh√°y tr∆∞·ªõc
    static bool isOn = false;        // Tr·∫°ng th√°i ƒë√®n v√†ng

    if (millis() - lastBlinkTime >= 100)  // M·ªói 100ms ƒë·ªïi tr·∫°ng th√°i ƒë√®n v√†ng
    {
        isOn = !isOn;
        digitalWrite(yLED, isOn ? HIGH : LOW);
        lastBlinkTime = millis();  // C·∫≠p nh·∫≠t th·ªùi gian nh·∫•p nh√°y
    }
}
