#define BLYNK_TEMPLATE_ID "TMPL6Pqb5LTxn"
#define BLYNK_TEMPLATE_NAME "ThoiTiet"
#define BLYNK_AUTH_TOKEN "EJ09Np-So_h3eu_2VdX1qKgbt_vxJOia"
#define BLYNK_PRINT Serial

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>
#include <TM1637Display.h>

// üîó Th√¥ng tin WiFi
const char ssid[] = "Wokwi-GUEST";
const char pass[] = "";

// üõ† Ch√¢n k·∫øt n·ªëi ph·∫ßn c·ª©ng
#define DHT_PIN 16
#define BUTTON_PIN 23
#define BLUE_LED_PIN 21
#define CLK_PIN 18
#define DIO_PIN 19

// ‚è≥ Th·ªùi gian l·∫•y m·∫´u
#define SENSOR_INTERVAL 2000  // 2 gi√¢y c·∫≠p nh·∫≠t d·ªØ li·ªáu c·∫£m bi·∫øn

// üîå Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng ph·∫ßn c·ª©ng
DHT dht(DHT_PIN, DHT22);
TM1637Display display(CLK_PIN, DIO_PIN);
BlynkTimer timer;

// üåç ƒê·ªãa ch·ªâ m√°y ch·ªß Blynk (IP c·ªßa blynk.cloud, c√≥ th·ªÉ c·∫ßn c·∫≠p nh·∫≠t n·∫øu thay ƒë·ªïi)
IPAddress blynkServerIP(128, 199, 144, 129);
uint16_t blynkPort = 8080; // D√πng c·ªïng 8080 thay v√¨ 80

// ‚è± Bi·∫øn to√†n c·ª•c
uint32_t startTime;
bool displayOn = true;
bool lastButtonState = HIGH;
bool lastLedState = LOW;
uint32_t lastDisplayUpdate = 0;

// üå°Ô∏è Bi·∫øn c·∫£m bi·∫øn
float humidity = 0;
float temperature = 0;

// üîÑ Tr·∫°ng th√°i k·∫øt n·ªëi
bool blynkConnected = false;

// üïí Bi·∫øn ƒë·ªÉ th·ª≠ k·∫øt n·ªëi l·∫°i khi m·∫•t WiFi/Blynk
unsigned long lastReconnectAttempt = 0;
const unsigned long reconnectInterval = 5000; // 5 gi√¢y th·ª≠ l·∫°i

// üöÄ H√†m g·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn l√™n Blynk
void sendSensorData() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi WiFi, kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu!");
        return;
    }

    humidity = dht.readHumidity();
    temperature = dht.readTemperature();

    if (!isnan(humidity) && !isnan(temperature)) {
        Serial.printf("üå°Ô∏è Nhi·ªát ƒë·ªô: %.1f ¬∞C, üíß ƒê·ªô ·∫©m: %.1f%%", temperature, humidity);

        if (Blynk.connected()) {
            Blynk.virtualWrite(V5, temperature);  // G·ª≠i nhi·ªát ƒë·ªô l√™n Blynk
            Blynk.virtualWrite(V6, humidity);    // G·ª≠i ƒë·ªô ·∫©m l√™n Blynk
            Blynk.virtualWrite(V0, (millis() - startTime) / 1000); // G·ª≠i th·ªùi gian ho·∫°t ƒë·ªông
        } else {
            Serial.println("‚ö†Ô∏è Blynk ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu!");
        }
    } else {
        Serial.println("‚ö†Ô∏è L·ªói ƒë·ªçc d·ªØ li·ªáu t·ª´ DHT22!");
    }
}

// üîò X·ª≠ l√Ω n√∫t nh·∫•n t·ª´ Blynk
BLYNK_WRITE(V1) {
    lastLedState = param.asInt();
    digitalWrite(BLUE_LED_PIN, lastLedState);
    displayOn = !lastLedState;
    if (!displayOn) {
        display.clear();
    }
}

// ‚úÖ Khi Blynk k·∫øt n·ªëi l·∫°i
BLYNK_CONNECTED() {
    blynkConnected = true;
    Blynk.virtualWrite(V1, lastLedState);
    Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi Blynk th√†nh c√¥ng!");
}

// üì° K·∫øt n·ªëi WiFi kh√¥ng l√†m treo ch∆∞∆°ng tr√¨nh
void connectWiFi() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("üîÑ ƒêang k·∫øt n·ªëi l·∫°i WiFi...");
        WiFi.disconnect();
        WiFi.begin(ssid, pass);
    }
}

// üîó K·∫øt n·ªëi l·∫°i Blynk (d√πng IP tr·ª±c ti·∫øp ƒë·ªÉ nhanh h∆°n)
void connectBlynk() {
    unsigned long currentMillis = millis();
    
    if (!Blynk.connected() && (currentMillis - lastReconnectAttempt > reconnectInterval)) {
        lastReconnectAttempt = currentMillis;
        
        Serial.println("üîÑ ƒêang k·∫øt n·ªëi l·∫°i Blynk...");
        
        if (Blynk.connect(1000)) {
            Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i Blynk th√†nh c√¥ng!");
            blynkConnected = true;
        } else {
            Serial.println("‚ùå K·∫øt n·ªëi Blynk th·∫•t b·∫°i, s·∫Ω th·ª≠ l·∫°i sau!");
            blynkConnected = false;
        }
    }
}

// üéØ Hi·ªÉn th·ªã th·ªùi gian ho·∫°t ƒë·ªông l√™n m√†n h√¨nh LED 7 ƒëo·∫°n
void updateDisplay() {
    if (displayOn && millis() - lastDisplayUpdate > 1000) {
        lastDisplayUpdate = millis();
        uint32_t uptime = (millis() - startTime) / 1000; // Th·ªùi gian ho·∫°t ƒë·ªông t√≠nh b·∫±ng gi√¢y
        display.showNumberDecEx(uptime, 0x80, true);
    }
}

void loop() {
    Blynk.run();   // Ch·∫°y Blynk
    timer.run();   // Ch·∫°y timer
    connectWiFi(); // Ki·ªÉm tra & k·∫øt n·ªëi l·∫°i WiFi n·∫øu m·∫•t k·∫øt n·ªëi
    connectBlynk(); // Ki·ªÉm tra & k·∫øt n·ªëi l·∫°i Blynk n·∫øu m·∫•t k·∫øt n·ªëi

    // üéõ X·ª≠ l√Ω n√∫t nh·∫•n v·∫≠t l√Ω
    bool currentButtonState = digitalRead(BUTTON_PIN);
    if (currentButtonState == LOW && lastButtonState == HIGH) {
        lastLedState = !lastLedState;
        digitalWrite(BLUE_LED_PIN, lastLedState);
        Blynk.virtualWrite(V1, lastLedState);
    }
    lastButtonState = currentButtonState;

    // üñ• Hi·ªÉn th·ªã th·ªùi gian ho·∫°t ƒë·ªông l√™n m√†n h√¨nh LED 7 ƒëo·∫°n
    updateDisplay();
}

void setup() {
    Serial.begin(115200);
    
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    pinMode(BLUE_LED_PIN, OUTPUT);
    digitalWrite(BLUE_LED_PIN, LOW);

    dht.begin();
    display.setBrightness(5);
    display.clear();

    startTime = millis();

    Serial.println("üîó ƒêang k·∫øt n·ªëi WiFi...");
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, pass);

    uint32_t startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
        delay(500);
        Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");
        Serial.print("üåç IP: ");
        Serial.println(WiFi.localIP());

        // ‚ö° K·∫øt n·ªëi nhanh v·ªõi Blynk qua IP
        Blynk.config(BLYNK_AUTH_TOKEN, blynkServerIP, blynkPort);

        if (Blynk.connect()) {
            Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi Blynk th√†nh c√¥ng!");
        } else {
            Serial.println("‚ùå L·ªói k·∫øt n·ªëi Blynk!");
        }
    } else {
        Serial.println("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi!");
    }

    // üïí Thi·∫øt l·∫≠p timer g·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn
    timer.setInterval(SENSOR_INTERVAL, sendSensorData);
    
    Serial.println("üöÄ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng!");
}
